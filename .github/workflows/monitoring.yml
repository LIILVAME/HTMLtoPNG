name: üìä Monitoring et Alertes Avanc√©es

on:
  schedule:
    # Monitoring quotidien √† 6h du matin
    - cron: '0 6 * * *'
    # Monitoring hebdomadaire le dimanche √† minuit
    - cron: '0 0 * * 0'
  workflow_dispatch:
    inputs:
      monitoring_type:
        description: 'Type de monitoring'
        required: true
        default: 'complet'
        type: choice
        options:
        - complet
        - performance
        - securite
        - disponibilite

jobs:
  health-check:
    name: üè• V√©rification de Sant√©
    runs-on: ubuntu-latest
    outputs:
      site_status: ${{ steps.check.outputs.status }}
      response_time: ${{ steps.check.outputs.response_time }}
    steps:
      - name: üåê Test de disponibilit√© du site
        id: check
        run: |
          echo "üåê V√©rification de la disponibilit√© du site"
          
          SITE_URL="https://liilvame.github.io/HTMLtoPNG/"
          
          # Test de disponibilit√© avec mesure du temps de r√©ponse
          start_time=$(date +%s%N)
          
          if curl -f -s -o /dev/null -w "%{http_code}" "$SITE_URL" | grep -q "200"; then
            end_time=$(date +%s%N)
            response_time=$(( (end_time - start_time) / 1000000 ))
            
            echo "‚úÖ Site accessible"
            echo "‚è±Ô∏è Temps de r√©ponse: ${response_time}ms"
            echo "status=up" >> $GITHUB_OUTPUT
            echo "response_time=${response_time}" >> $GITHUB_OUTPUT
            
            # V√©rification du contenu
            content=$(curl -s "$SITE_URL")
            if echo "$content" | grep -q "HTML to PNG"; then
              echo "‚úÖ Contenu principal d√©tect√©"
            else
              echo "‚ö†Ô∏è Contenu principal non d√©tect√©"
            fi
            
          else
            echo "‚ùå Site inaccessible"
            echo "status=down" >> $GITHUB_OUTPUT
            echo "response_time=0" >> $GITHUB_OUTPUT
          fi

      - name: üîç Test des fonctionnalit√©s critiques
        run: |
          echo "üîç Test des fonctionnalit√©s critiques"
          
          SITE_URL="https://liilvame.github.io/HTMLtoPNG/"
          
          # R√©cup√©ration du contenu de la page
          content=$(curl -s "$SITE_URL")
          
          # Test de pr√©sence des √©l√©ments critiques
          critical_elements=(
            "convertBtn"
            "htmlInput"
            "downloadBtn"
            "script.js"
            "styles.css"
          )
          
          for element in "${critical_elements[@]}"; do
            if echo "$content" | grep -q "$element"; then
              echo "‚úÖ √âl√©ment critique '$element' pr√©sent"
            else
              echo "‚ùå √âl√©ment critique '$element' manquant"
            fi
          done

  performance-monitoring:
    name: ‚ö° Monitoring des Performances
    runs-on: ubuntu-latest
    needs: health-check
    if: needs.health-check.outputs.site_status == 'up'
    steps:
      - name: üåê Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: üîß Installation de Lighthouse
        run: npm install -g lighthouse

      - name: ‚ö° Audit de performance Lighthouse
        run: |
          echo "‚ö° Audit de performance avec Lighthouse"
          
          SITE_URL="https://liilvame.github.io/HTMLtoPNG/"
          
          # Ex√©cution de Lighthouse
          lighthouse "$SITE_URL" \
            --output=json \
            --output-path=./lighthouse-report.json \
            --chrome-flags="--headless --no-sandbox" \
            --quiet || true
          
          if [ -f lighthouse-report.json ]; then
            echo "üìä Extraction des m√©triques de performance"
            
            # Extraction des scores principaux
            performance_score=$(node -e "const report = JSON.parse(require('fs').readFileSync('lighthouse-report.json')); console.log(Math.round(report.lhr.categories.performance.score * 100));")
            accessibility_score=$(node -e "const report = JSON.parse(require('fs').readFileSync('lighthouse-report.json')); console.log(Math.round(report.lhr.categories.accessibility.score * 100));")
            best_practices_score=$(node -e "const report = JSON.parse(require('fs').readFileSync('lighthouse-report.json')); console.log(Math.round(report.lhr.categories['best-practices'].score * 100));")
            seo_score=$(node -e "const report = JSON.parse(require('fs').readFileSync('lighthouse-report.json')); console.log(Math.round(report.lhr.categories.seo.score * 100));")
            
            echo "üìà Scores Lighthouse:"
            echo "  - Performance: ${performance_score}/100"
            echo "  - Accessibilit√©: ${accessibility_score}/100"
            echo "  - Bonnes pratiques: ${best_practices_score}/100"
            echo "  - SEO: ${seo_score}/100"
            
            # Alertes si les scores sont trop bas
            if [ $performance_score -lt 80 ]; then
              echo "‚ö†Ô∏è ALERTE: Score de performance faible ($performance_score/100)"
            fi
            
            if [ $accessibility_score -lt 90 ]; then
              echo "‚ö†Ô∏è ALERTE: Score d'accessibilit√© faible ($accessibility_score/100)"
            fi
            
            # Extraction des m√©triques Core Web Vitals
            echo "üéØ Core Web Vitals:"
            node -e "
              const report = JSON.parse(require('fs').readFileSync('lighthouse-report.json'));
              const audits = report.lhr.audits;
              
              const fcp = audits['first-contentful-paint']?.displayValue || 'N/A';
              const lcp = audits['largest-contentful-paint']?.displayValue || 'N/A';
              const cls = audits['cumulative-layout-shift']?.displayValue || 'N/A';
              const fid = audits['max-potential-fid']?.displayValue || 'N/A';
              
              console.log('  - First Contentful Paint:', fcp);
              console.log('  - Largest Contentful Paint:', lcp);
              console.log('  - Cumulative Layout Shift:', cls);
              console.log('  - First Input Delay:', fid);
            "
            
          else
            echo "‚ùå Impossible de g√©n√©rer le rapport Lighthouse"
          fi

      - name: üì§ Upload du rapport Lighthouse
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-report
          path: lighthouse-report.json
          retention-days: 30

  security-monitoring:
    name: üîí Monitoring de S√©curit√©
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout du code
        uses: actions/checkout@v4

      - name: üîí Audit de s√©curit√© avanc√©
        run: |
          echo "üîí Audit de s√©curit√© avanc√©"
          
          # V√©rification des en-t√™tes de s√©curit√©
          SITE_URL="https://liilvame.github.io/HTMLtoPNG/"
          
          echo "üîç V√©rification des en-t√™tes de s√©curit√©"
          headers=$(curl -s -I "$SITE_URL")
          
          # V√©rification des en-t√™tes de s√©curit√© importants
          security_headers=(
            "X-Frame-Options"
            "X-Content-Type-Options"
            "Referrer-Policy"
            "Content-Security-Policy"
          )
          
          for header in "${security_headers[@]}"; do
            if echo "$headers" | grep -qi "$header"; then
              echo "‚úÖ En-t√™te de s√©curit√© '$header' pr√©sent"
            else
              echo "‚ö†Ô∏è En-t√™te de s√©curit√© '$header' manquant"
            fi
          done

      - name: üîç Scan des vuln√©rabilit√©s dans le code
        run: |
          echo "üîç Scan des vuln√©rabilit√©s dans le code"
          
          # Recherche de patterns de s√©curit√© probl√©matiques
          echo "üîç Recherche de patterns dangereux..."
          
          # V√©rification des scripts inline
          if grep -r "javascript:" *.html 2>/dev/null; then
            echo "‚ö†Ô∏è Scripts javascript: d√©tect√©s dans le HTML"
          else
            echo "‚úÖ Aucun script javascript: d√©tect√©"
          fi
          
          # V√©rification des eval()
          if grep -r "eval(" *.js 2>/dev/null; then
            echo "‚ö†Ô∏è Utilisation d'eval() d√©tect√©e"
          else
            echo "‚úÖ Aucune utilisation d'eval() d√©tect√©e"
          fi
          
          # V√©rification des innerHTML sans sanitization
          if grep -r "innerHTML" *.js 2>/dev/null; then
            echo "‚ö†Ô∏è Utilisation d'innerHTML d√©tect√©e - v√©rifier la sanitization"
          else
            echo "‚úÖ Aucune utilisation d'innerHTML d√©tect√©e"
          fi
          
          # V√©rification des cl√©s API ou secrets
          secret_patterns=(
            "api[_-]?key"
            "secret"
            "password"
            "token"
            "auth"
          )
          
          for pattern in "${secret_patterns[@]}"; do
            if grep -ri "$pattern" *.js *.html *.css 2>/dev/null | grep -v "placeholder" | grep -v "example"; then
              echo "‚ö†Ô∏è Possible secret d√©tect√© avec le pattern '$pattern'"
            fi
          done

  uptime-monitoring:
    name: ‚è∞ Monitoring de Disponibilit√©
    runs-on: ubuntu-latest
    steps:
      - name: ‚è∞ Test de disponibilit√© sur 24h
        run: |
          echo "‚è∞ Simulation de monitoring de disponibilit√©"
          
          SITE_URL="https://liilvame.github.io/HTMLtoPNG/"
          
          # Test de disponibilit√© multiple
          success_count=0
          total_tests=5
          total_response_time=0
          
          for i in $(seq 1 $total_tests); do
            echo "üîç Test $i/$total_tests"
            
            start_time=$(date +%s%N)
            
            if curl -f -s -o /dev/null "$SITE_URL"; then
              end_time=$(date +%s%N)
              response_time=$(( (end_time - start_time) / 1000000 ))
              
              echo "  ‚úÖ Succ√®s - ${response_time}ms"
              success_count=$((success_count + 1))
              total_response_time=$((total_response_time + response_time))
            else
              echo "  ‚ùå √âchec"
            fi
            
            # Attendre 10 secondes entre les tests
            sleep 10
          done
          
          # Calcul des statistiques
          uptime_percentage=$((success_count * 100 / total_tests))
          
          if [ $success_count -gt 0 ]; then
            avg_response_time=$((total_response_time / success_count))
          else
            avg_response_time=0
          fi
          
          echo "üìä Statistiques de disponibilit√©:"
          echo "  - Uptime: ${uptime_percentage}% (${success_count}/${total_tests})"
          echo "  - Temps de r√©ponse moyen: ${avg_response_time}ms"
          
          # Alertes
          if [ $uptime_percentage -lt 100 ]; then
            echo "‚ö†Ô∏è ALERTE: Disponibilit√© r√©duite (${uptime_percentage}%)"
          fi
          
          if [ $avg_response_time -gt 3000 ]; then
            echo "‚ö†Ô∏è ALERTE: Temps de r√©ponse √©lev√© (${avg_response_time}ms)"
          fi

  report-generation:
    name: üìä G√©n√©ration de Rapport
    runs-on: ubuntu-latest
    needs: [health-check, performance-monitoring, security-monitoring, uptime-monitoring]
    if: always()
    steps:
      - name: üìä G√©n√©ration du rapport de monitoring
        run: |
          echo "üìä G√©n√©ration du rapport de monitoring complet"
          
          # R√©cup√©ration des statuts
          HEALTH_STATUS="${{ needs.health-check.result }}"
          PERFORMANCE_STATUS="${{ needs.performance-monitoring.result }}"
          SECURITY_STATUS="${{ needs.security-monitoring.result }}"
          UPTIME_STATUS="${{ needs.uptime-monitoring.result }}"
          
          SITE_STATUS="${{ needs.health-check.outputs.site_status }}"
          RESPONSE_TIME="${{ needs.health-check.outputs.response_time }}"
          
          # G√©n√©ration du rapport
          cat > monitoring-report.md << EOF
          # üìä Rapport de Monitoring - $(date)
          
          ## üéØ R√©sum√© Ex√©cutif
          
          **Statut global**: $([ "$HEALTH_STATUS" = "success" ] && echo "üü¢ Op√©rationnel" || echo "üî¥ Probl√®me d√©tect√©")
          **Site web**: $([ "$SITE_STATUS" = "up" ] && echo "üü¢ En ligne" || echo "üî¥ Hors ligne")
          **Temps de r√©ponse**: ${RESPONSE_TIME}ms
          
          ## üìã D√©tail des V√©rifications
          
          ### üè• Sant√© du Site
          - **Statut**: $HEALTH_STATUS
          - **Disponibilit√©**: $SITE_STATUS
          - **Temps de r√©ponse**: ${RESPONSE_TIME}ms
          
          ### ‚ö° Performances
          - **Statut**: $PERFORMANCE_STATUS
          - **Audit Lighthouse**: $([ "$PERFORMANCE_STATUS" = "success" ] && echo "‚úÖ Compl√©t√©" || echo "‚ùå √âchec")
          
          ### üîí S√©curit√©
          - **Statut**: $SECURITY_STATUS
          - **Audit de s√©curit√©**: $([ "$SECURITY_STATUS" = "success" ] && echo "‚úÖ Compl√©t√©" || echo "‚ùå √âchec")
          
          ### ‚è∞ Disponibilit√©
          - **Statut**: $UPTIME_STATUS
          - **Tests de disponibilit√©**: $([ "$UPTIME_STATUS" = "success" ] && echo "‚úÖ Compl√©t√©s" || echo "‚ùå √âchec")
          
          ## üö® Alertes et Recommandations
          
          $(if [ "$HEALTH_STATUS" != "success" ] || [ "$SITE_STATUS" != "up" ]; then
            echo "### üî¥ Alertes Critiques"
            echo "- Site inaccessible ou probl√®me de sant√© d√©tect√©"
            echo "- Action imm√©diate requise"
            echo ""
          fi)
          
          $(if [ "$RESPONSE_TIME" -gt 2000 ] 2>/dev/null; then
            echo "### ‚ö†Ô∏è Alertes de Performance"
            echo "- Temps de r√©ponse √©lev√© (${RESPONSE_TIME}ms > 2000ms)"
            echo "- Optimisation recommand√©e"
            echo ""
          fi)
          
          ## üìà Tendances
          
          - **Monitoring quotidien**: Actif
          - **Historique**: Consultez les artifacts des ex√©cutions pr√©c√©dentes
          - **Prochaine v√©rification**: $(date -d '+1 day' '+%Y-%m-%d %H:%M')
          
          ## üîß Actions Recommand√©es
          
          1. **Surveillance continue**: Maintenir le monitoring automatique
          2. **Optimisation**: Consulter les rapports Lighthouse pour les am√©liorations
          3. **S√©curit√©**: Impl√©menter les en-t√™tes de s√©curit√© manquants
          4. **Performance**: Optimiser les assets si n√©cessaire
          
          ---
          
          **Rapport g√©n√©r√© automatiquement le $(date)**
          **Workflow**: ${{ github.workflow }}
          **Run ID**: ${{ github.run_id }}
          EOF
          
          echo "‚úÖ Rapport de monitoring g√©n√©r√©"

      - name: üì§ Upload du rapport de monitoring
        uses: actions/upload-artifact@v4
        with:
          name: monitoring-report-$(date +%Y%m%d)
          path: monitoring-report.md
          retention-days: 90

  alerting:
    name: üö® Syst√®me d'Alertes
    runs-on: ubuntu-latest
    needs: [health-check, performance-monitoring, security-monitoring, uptime-monitoring]
    if: failure() || needs.health-check.outputs.site_status == 'down'
    steps:
      - name: üö® G√©n√©ration d'alerte critique
        run: |
          echo "üö® ALERTE CRITIQUE D√âTECT√âE"
          
          SITE_STATUS="${{ needs.health-check.outputs.site_status }}"
          
          if [ "$SITE_STATUS" = "down" ]; then
            echo "‚ùå SITE HORS LIGNE"
            echo "üîç Le site https://liilvame.github.io/HTMLtoPNG/ est inaccessible"
            echo "‚è∞ D√©tect√© le: $(date)"
            echo "üö® Action imm√©diate requise"
          fi
          
          # Ici, vous pourriez int√©grer avec des services d'alerte comme:
          # - Slack
          # - Discord
          # - Email
          # - SMS
          # - PagerDuty
          
          echo "üìß Notification d'alerte envoy√©e (simulation)"

      - name: üìù Log de l'incident
        run: |
          echo "üìù Enregistrement de l'incident"
          
          cat > incident-log.md << EOF
          # üö® Log d'Incident - $(date)
          
          ## üìã D√©tails de l'Incident
          
          **Heure de d√©tection**: $(date)
          **Type**: Probl√®me de disponibilit√©/performance
          **S√©v√©rit√©**: Critique
          
          ## üîç Diagnostic
          
          - **Statut du site**: ${{ needs.health-check.outputs.site_status }}
          - **Temps de r√©ponse**: ${{ needs.health-check.outputs.response_time }}ms
          
          ## üõ†Ô∏è Actions √† Entreprendre
          
          1. V√©rifier l'√©tat de GitHub Pages
          2. Contr√¥ler les logs de d√©ploiement
          3. Tester la connectivit√© r√©seau
          4. V√©rifier la configuration DNS
          
          ## üìû Contacts d'Urgence
          
          - √âquipe DevOps: [Contact]
          - Administrateur syst√®me: [Contact]
          
          ---
          
          **Incident ID**: ${{ github.run_id }}
          **Workflow**: ${{ github.workflow }}
          EOF
          
          echo "‚úÖ Log d'incident cr√©√©"

      - name: üì§ Upload du log d'incident
        uses: actions/upload-artifact@v4
        with:
          name: incident-log-$(date +%Y%m%d-%H%M%S)
          path: incident-log.md
          retention-days: 365