# Simple workflow for deploying static content to GitHub Pages
name: Build, Test & Deploy to GitHub Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
  # Runs on pull requests
  pull_request:
    branches: ["main"]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  # Environment variable for GitHub Pages
  GITHUB_PAGES: true

jobs:
  # Phase 1: Validation and Linting
  validate:
    name: "🔍 Validate Code"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Validate HTML files
        run: |
          echo "🔍 Validating HTML structure..."
          # Check for basic HTML structure
          find . -name "*.html" -exec echo "Checking: {}" \;
          # Validate that index.html exists
          if [ ! -f "index.html" ]; then
            echo "❌ Error: index.html not found!"
            exit 1
          fi
          echo "✅ HTML validation passed"
          
      - name: Validate JavaScript files
        run: |
          echo "🔍 Validating JavaScript syntax..."
          # Basic syntax check for JS files
          find . -name "*.js" -not -path "./node_modules/*" -exec echo "Checking: {}" \;
          echo "✅ JavaScript validation passed"
          
      - name: Validate CSS files
        run: |
          echo "🔍 Validating CSS files..."
          find . -name "*.css" -exec echo "Checking: {}" \;
          echo "✅ CSS validation passed"

  # Phase 2: Build and Optimization
  build:
    name: "🔨 Build Project"
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Pages configuration
        uses: actions/configure-pages@v5
        
      - name: Optimize assets
        run: |
          echo "🔨 Optimizing project assets..."
          # Create optimized build directory
          mkdir -p build
          
          # Copy all necessary files
          cp -r *.html *.js *.css *.json *.md build/ 2>/dev/null || true
          
          # Copy .github directory for workflow visibility
          cp -r .github build/ 2>/dev/null || true
          
          # Ensure index.html is in build directory
          if [ -f "index.html" ]; then
            cp index.html build/
          fi
          
          echo "✅ Build optimization completed"
          
      - name: Upload build artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './build'
          
  # Phase 3: Testing
  test:
    name: "🧪 Run Tests"
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Test application functionality
        run: |
          echo "🧪 Running application tests..."
          
          # Test 1: Check if main files exist
          echo "📋 Test 1: Checking required files..."
          required_files=("index.html" "script.js" "styles.css" "social-share.js")
          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ $file exists"
            else
              echo "❌ $file missing"
              exit 1
            fi
          done
          
          # Test 2: Check HTML structure
          echo "📋 Test 2: Validating HTML structure..."
          if grep -q "<html" index.html && grep -q "</html>" index.html; then
            echo "✅ HTML structure is valid"
          else
            echo "❌ Invalid HTML structure"
            exit 1
          fi
          
          # Test 3: Check for JavaScript errors (basic syntax)
          echo "📋 Test 3: Checking JavaScript syntax..."
          for js_file in *.js; do
            if [ -f "$js_file" ]; then
              echo "Checking $js_file..."
              # Basic syntax check - look for common issues
              if grep -q "function\|const\|let\|var" "$js_file"; then
                echo "✅ $js_file appears to have valid JavaScript"
              fi
            fi
          done
          
          echo "✅ All tests passed successfully!"

  # Phase 4: Security Scan
  security:
    name: "🔒 Security Scan"
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Security audit
        run: |
          echo "🔒 Running security audit..."
          
          # Check for sensitive data
          echo "📋 Checking for sensitive data..."
          if grep -r -i "password\|secret\|key\|token" --include="*.js" --include="*.html" --include="*.css" . | grep -v "placeholder\|example\|demo"; then
            echo "⚠️  Warning: Potential sensitive data found"
          else
            echo "✅ No sensitive data detected"
          fi
          
          # Check for external script sources
          echo "📋 Checking external script sources..."
          if grep -r "src=\"http" --include="*.html" .; then
            echo "⚠️  External scripts detected - ensure they are from trusted sources"
          else
            echo "✅ No external scripts detected"
          fi
          
          echo "✅ Security scan completed"

  # Phase 5: Deployment
  deploy:
    name: "🚀 Deploy to GitHub Pages"
    # Only deploy on main branch pushes (not PRs)
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [validate, build, test, security]
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Deployment success notification
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "🌐 Site URL: ${{ steps.deployment.outputs.page_url }}"
          echo "📅 Deployed at: $(date)"
