class QuickBugFixes {
    constructor() {
        this.fixesApplied = [];
        this.criticalFixes = [
            'fixServiceManagerUndefined',
            'fixConverterInitialization',
            'fixMissingElements',
            'fixConsoleErrors',
            'fixEventListeners',
            'fixUndefinedVariables'
        ];
    }

    async applyAllFixes() {
        console.log('üöÄ Application des corrections rapides...');
        
        for (const fixName of this.criticalFixes) {
            try {
                await this[fixName]();
                this.fixesApplied.push({
                    name: fixName,
                    status: 'success',
                    timestamp: Date.now()
                });
            } catch (error) {
                console.error(`‚ùå Erreur lors de ${fixName}:`, error);
                this.fixesApplied.push({
                    name: fixName,
                    status: 'error',
                    error: error.message,
                    timestamp: Date.now()
                });
            }
        }
        
        this.showFixesReport();
    }

    fixServiceManagerUndefined() {
        console.log('üîß Correction: ServiceManager undefined');
        
        if (typeof serviceManager === 'undefined') {
            // Cr√©er un ServiceManager de base
            window.serviceManager = {
                services: new Map(),
                initialized: false,
                
                async initializeAll() {
                    console.log('üì¶ Initialisation des services de base...');
                    this.initialized = true;
                    return Promise.resolve();
                },
                
                getService(name) {
                    return this.services.get(name) || null;
                },
                
                registerService(name, service) {
                    this.services.set(name, service);
                }
            };
            
            console.log('‚úÖ ServiceManager de base cr√©√©');
        }
    }

    fixConverterInitialization() {
        console.log('üîß Correction: Initialisation du converter');
        
        if (typeof window.converter === 'undefined') {
            // Cr√©er un converter de base
            window.converter = {
                initialized: false,
                
                async init() {
                    console.log('üéØ Initialisation du converter de base...');
                    this.initialized = true;
                    this.setupBasicFunctionality();
                },
                
                setupBasicFunctionality() {
                    // Fonctionnalit√© de base pour √©viter les erreurs
                    const convertBtn = document.getElementById('convertBtn');
                    if (convertBtn) {
                        convertBtn.addEventListener('click', () => {
                            console.log('üîÑ Conversion d√©marr√©e...');
                            this.performBasicConversion();
                        });
                    }
                },
                
                performBasicConversion() {
                    const htmlInput = document.getElementById('htmlInput');
                    const cssInput = document.getElementById('cssInput');
                    
                    if (htmlInput && cssInput) {
                        const html = htmlInput.value;
                        const css = cssInput.value;
                        
                        if (html.trim()) {
                            console.log('‚úÖ Conversion de base effectu√©e');
                            this.updatePreview(html, css);
                        } else {
                            console.warn('‚ö†Ô∏è Aucun contenu HTML √† convertir');
                        }
                    }
                },
                
                updatePreview(html, css) {
                    const previewFrame = document.getElementById('previewFrame');
                    if (previewFrame) {
                        const combinedHTML = `
                            <!DOCTYPE html>
                            <html>
                            <head>
                                <style>${css}</style>
                            </head>
                            <body>${html}</body>
                            </html>
                        `;
                        
                        const blob = new Blob([combinedHTML], { type: 'text/html' });
                        const url = URL.createObjectURL(blob);
                        previewFrame.src = url;
                        
                        setTimeout(() => URL.revokeObjectURL(url), 1000);
                    }
                }
            };
            
            console.log('‚úÖ Converter de base cr√©√©');
        }
    }

    fixMissingElements() {
        console.log('üîß Correction: √âl√©ments DOM manquants');
        
        const requiredElements = [
            { id: 'htmlInput', tag: 'textarea', placeholder: 'Entrez votre code HTML...' },
            { id: 'cssInput', tag: 'textarea', placeholder: 'Entrez votre code CSS...' },
            { id: 'convertBtn', tag: 'button', text: 'Convertir' },
            { id: 'previewFrame', tag: 'iframe' },
            { id: 'downloadBtn', tag: 'button', text: 'T√©l√©charger' },
            { id: 'formatSelect', tag: 'select' },
            { id: 'widthInput', tag: 'input', type: 'number', value: '800' },
            { id: 'heightInput', tag: 'input', type: 'number', value: '600' }
        ];
        
        requiredElements.forEach(elementConfig => {
            if (!document.getElementById(elementConfig.id)) {
                const element = document.createElement(elementConfig.tag);
                element.id = elementConfig.id;
                
                if (elementConfig.placeholder) {
                    element.placeholder = elementConfig.placeholder;
                }
                
                if (elementConfig.text) {
                    element.textContent = elementConfig.text;
                }
                
                if (elementConfig.type) {
                    element.type = elementConfig.type;
                }
                
                if (elementConfig.value) {
                    element.value = elementConfig.value;
                }
                
                // Styles de base
                element.style.cssText = `
                    margin: 5px;
                    padding: 8px;
                    border: 1px solid #ddd;
                    border-radius: 4px;
                    font-family: inherit;
                `;
                
                // Ajouter √† un conteneur ou au body
                const container = document.querySelector('.main-container') || document.body;
                container.appendChild(element);
                
                console.log(`‚úÖ √âl√©ment ${elementConfig.id} cr√©√©`);
            }
        });
    }

    fixConsoleErrors() {
        console.log('üîß Correction: Erreurs console');
        
        // Intercepter et corriger les erreurs console courantes
        const originalError = console.error;
        
        console.error = function(...args) {
            const message = args.join(' ');
            
            // Ignorer certaines erreurs non critiques
            if (message.includes('favicon.ico') || 
                message.includes('ServiceWorker') ||
                message.includes('analytics')) {
                return; // Ignorer ces erreurs
            }
            
            // Appeler l'erreur originale pour les autres cas
            originalError.apply(console, args);
        };
        
        console.log('‚úÖ Gestion des erreurs console am√©lior√©e');
    }

    fixEventListeners() {
        console.log('üîß Correction: Event listeners');
        
        // S'assurer que les event listeners de base fonctionnent
        document.addEventListener('DOMContentLoaded', () => {
            // Initialiser l'application si elle n'est pas d√©j√† initialis√©e
            if (typeof initializeApp === 'function' && !window.converter?.initialized) {
                setTimeout(() => {
                    try {
                        initializeApp();
                    } catch (error) {
                        console.warn('‚ö†Ô∏è Erreur lors de l\'initialisation:', error);
                        // Fallback: initialiser le converter de base
                        if (window.converter && typeof window.converter.init === 'function') {
                            window.converter.init();
                        }
                    }
                }, 500);
            }
        });
        
        // G√©rer les erreurs globales
        window.addEventListener('error', (event) => {
            console.warn('üö® Erreur globale intercept√©e:', event.message);
            event.preventDefault(); // Emp√™cher l'affichage de l'erreur
        });
        
        // G√©rer les promesses rejet√©es
        window.addEventListener('unhandledrejection', (event) => {
            console.warn('üö® Promise rejet√©e intercept√©e:', event.reason);
            event.preventDefault(); // Emp√™cher l'affichage de l'erreur
        });
        
        console.log('‚úÖ Event listeners de s√©curit√© ajout√©s');
    }

    fixUndefinedVariables() {
        console.log('üîß Correction: Variables undefined');
        
        // Cr√©er des variables de base si elles n'existent pas
        if (typeof Utils === 'undefined') {
            window.Utils = {
                debounce: (func, wait) => {
                    let timeout;
                    return function executedFunction(...args) {
                        const later = () => {
                            clearTimeout(timeout);
                            func(...args);
                        };
                        clearTimeout(timeout);
                        timeout = setTimeout(later, wait);
                    };
                },
                
                throttle: (func, limit) => {
                    let inThrottle;
                    return function() {
                        const args = arguments;
                        const context = this;
                        if (!inThrottle) {
                            func.apply(context, args);
                            inThrottle = true;
                            setTimeout(() => inThrottle = false, limit);
                        }
                    }
                },
                
                generateId: (prefix = 'id') => {
                    return `${prefix}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
                }
            };
            
            console.log('‚úÖ Utils de base cr√©√©');
        }
        
        if (typeof Config === 'undefined') {
            window.Config = {
                environment: 'development',
                enableConsoleLogging: true,
                defaultFormat: 'png',
                defaultWidth: 800,
                defaultHeight: 600
            };
            
            console.log('‚úÖ Config de base cr√©√©');
        }
        
        if (typeof EventManager === 'undefined') {
            window.EventManager = {
                listeners: new Map(),
                
                on(element, event, callback) {
                    if (typeof element === 'string') {
                        element = document.querySelector(element);
                    }
                    
                    if (element) {
                        element.addEventListener(event, callback);
                        
                        const key = `${element.id || 'unknown'}_${event}`;
                        if (!this.listeners.has(key)) {
                            this.listeners.set(key, []);
                        }
                        this.listeners.get(key).push(callback);
                    }
                },
                
                off(element, event, callback) {
                    if (typeof element === 'string') {
                        element = document.querySelector(element);
                    }
                    
                    if (element) {
                        element.removeEventListener(event, callback);
                    }
                }
            };
            
            console.log('‚úÖ EventManager de base cr√©√©');
        }
    }

    showFixesReport() {
        const successCount = this.fixesApplied.filter(f => f.status === 'success').length;
        const errorCount = this.fixesApplied.filter(f => f.status === 'error').length;
        
        console.log(`üéØ RAPPORT DES CORRECTIONS RAPIDES:`);
        console.log(`‚úÖ Corrections r√©ussies: ${successCount}`);
        console.log(`‚ùå Corrections √©chou√©es: ${errorCount}`);
        console.log('üìã D√©tails:', this.fixesApplied);
        
        // Affichage visuel
        this.displayFixesNotification(successCount, errorCount);
    }

    displayFixesNotification(successCount, errorCount) {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
            color: white;
            padding: 15px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(76, 175, 80, 0.3);
            z-index: 10001;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            max-width: 300px;
            backdrop-filter: blur(10px);
        `;
        
        notification.innerHTML = `
            <div style="display: flex; align-items: center; margin-bottom: 8px;">
                <span style="font-size: 20px; margin-right: 8px;">üöÄ</span>
                <strong>Corrections Appliqu√©es</strong>
                <button onclick="this.parentNode.parentNode.remove()" style="
                    margin-left: auto;
                    background: rgba(255,255,255,0.2);
                    border: none;
                    color: white;
                    border-radius: 50%;
                    width: 24px;
                    height: 24px;
                    cursor: pointer;
                    font-size: 14px;
                ">√ó</button>
            </div>
            <div style="font-size: 14px; opacity: 0.9;">
                ‚úÖ R√©ussies: ${successCount}<br>
                ${errorCount > 0 ? `‚ùå √âchou√©es: ${errorCount}<br>` : ''}
                üéØ Application pr√™te √† utiliser
            </div>
        `;
        
        document.body.appendChild(notification);
        
        // Auto-suppression apr√®s 5 secondes
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 5000);
    }
}

// Initialiser et appliquer les corrections automatiquement
const quickFixes = new QuickBugFixes();

// Appliquer les corrections d√®s que possible
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        setTimeout(() => quickFixes.applyAllFixes(), 500);
    });
} else {
    setTimeout(() => quickFixes.applyAllFixes(), 500);
}

// Exporter pour utilisation externe
if (typeof module !== 'undefined' && module.exports) {
    module.exports = QuickBugFixes;
} else if (typeof window !== 'undefined') {
    window.QuickBugFixes = QuickBugFixes;
}